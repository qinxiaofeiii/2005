package com.baidu.shop.service.impl;

import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.entity.CategoryEntity;
import com.baidu.shop.mapper.CategoryMapper;
import com.baidu.shop.service.CategoryServiceI;

import com.baidu.shop.utils.ObjectUtil;
import com.google.gson.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Example;

import java.util.List;
@RestController
public class CategoryServiceImpl extends BaseApiService implements CategoryServiceI {

    @Autowired
    private CategoryMapper categoryMapper;

    @Override
    public Result<List<CategoryEntity>> getCategoryByPid(Integer pid) {

        CategoryEntity categoryEntity = new CategoryEntity();

        categoryEntity.setParentId(pid);

        List<CategoryEntity> list = categoryMapper.select(categoryEntity);

        return this.setResultSuccess(list);
    }

    @Override
    @Transactional //控制事务
    public Result<JsonObject> deleteCategoryById(Integer id) {
        //id校验
        if(ObjectUtil.isNotNull(id) || id > 0){
            //通过当前id查询信息
            CategoryEntity categoryEntity = categoryMapper.selectByPrimaryKey(id);

            if(ObjectUtil.isNull(categoryEntity)) return this.setResultError("数据不存在");

            //判断当前节点是否为父节点
            if(categoryEntity.getIsParent() == 1) return this.setResultError("当前节点为父节点,不能删除");

            //判断当前节点的父节点下还有没有其他叶子节点 大于1 说明有其他叶子节点 否则没有其他节点
            CategoryEntity categoryEntity1 = new CategoryEntity();
            categoryEntity1.setParentId(categoryEntity.getParentId());

            List<CategoryEntity> list = categoryMapper.select(categoryEntity1);
            if(list.size() <= 1){

                //将父节点改为叶子节点
                CategoryEntity updateCategoryEntity = new CategoryEntity();
                updateCategoryEntity.setIsParent(0);
                updateCategoryEntity.setId(categoryEntity1.getParentId());

                categoryMapper.updateByPrimaryKeySelective(updateCategoryEntity);
            }
            categoryMapper.deleteByPrimaryKey(id);
            return this.setResultSuccess();
        }

        return this.setResultError("id不合法");
    }
}
