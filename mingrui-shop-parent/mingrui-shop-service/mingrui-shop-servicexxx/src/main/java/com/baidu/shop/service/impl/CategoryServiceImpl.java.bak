package com.baidu.shop.service.impl;

import com.baidu.shop.base.BaseApiService;
import com.baidu.shop.base.Result;
import com.baidu.shop.entity.CategoryEntity;
import com.baidu.shop.mapper.CategoryMapper;
import com.baidu.shop.service.CategoryServiceI;

import com.baidu.shop.utils.ObjectUtil;
import com.google.gson.JsonObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Example;

import java.util.List;
@RestController
public class CategoryServiceImpl extends BaseApiService implements CategoryServiceI {

    @Autowired
    private CategoryMapper categoryMapper;

    @Override
    public Result<List<CategoryEntity>> getCategoryByPid(Integer pid) {

        CategoryEntity categoryEntity = new CategoryEntity();

        categoryEntity.setParentId(pid);

        List<CategoryEntity> list = categoryMapper.select(categoryEntity);

        return this.setResultSuccess(list);
    }

    @Override
    @Transactional //控制事务
    public Result<JsonObject> deleteCategoryById(Integer id) {

        // 1 : 校验id是否合法
        if(ObjectUtil.isNull(id) || id <= 0) return this.setResultError("id不合法");

        // 2 : 通过当前id查询数据
        CategoryEntity categoryEntity = categoryMapper.selectByPrimaryKey(id);

        if(ObjectUtil.isNull(categoryEntity)) return this.setResultError("数据不存在");

        // 3 : 判断是否为父节点
        //true: return setError
        if(categoryEntity.getIsParent() == 1) return this.setResultError("当前节点为父节点,不能被删除");

        // 4 : 通过父节点id查询是否有parent_id为父节点id的其他数据
        Example example = new Example(CategoryEntity.class);
        example.createCriteria().andEqualTo("parentId",categoryEntity.getParentId());
        List<CategoryEntity> categoryList = categoryMapper.selectByExample(example);

        //如果返回的数据小于或等于1 说明该节点的父节点下没有其他子节点 --- 将当前节点的父节点改为叶子节点
        if(categoryList.size() <= 1){

            CategoryEntity updateCategoryEntity = new CategoryEntity();
            updateCategoryEntity.setIsParent(0);
            updateCategoryEntity.setId(categoryEntity.getParentId());

            categoryMapper.updateByPrimaryKeySelective(updateCategoryEntity);
        }


        categoryMapper.deleteByPrimaryKey(id);

        return this.setResultSuccess();
    }
}
